
import pytest
import uonidtoolbox as unit
import numpy as np


def test_repeatedCall():
    Z = {}
    Z['u'] = np.array([-0.3731,0.8155,0.7989,0.1202,0.5712,0.4128,-0.9870,0.7596,-0.6572,-0.6039]).reshape(1,10)
    Z['y'] = np.array([0.1769,-0.3075,-0.1318,0.5954,1.0468,-0.1980,0.3277,-0.2383,0.2296,0.4400]).reshape(1,10)

    Z = unit._setup.startZ(Z)

    M_0 = unit._setup.startM(Z)
    M_1 = unit._setup.startM(Z, M_0)

    np.testing.assert_equal(M_0.keys(), M_1.keys())
    # np.testing.assert_equal(M_0, M_1)
    for k in M_0.keys():
        if isinstance(M_0[k], np.ndarray):
            np.testing.assert_allclose(M_0[k], M_1[k])
        else:
            np.testing.assert_equal(M_0[k], M_1[k])
        #endif
    #endfor
#endfunction

@pytest.mark.matlab
def test_matlabResult_inputEmpty():
    M_py = unit._setup.startM()
    M_ml = unit.testing._utils.helper_callMatlab_startM()

    M_py = M_py.asdict()
    np.testing.assert_equal(M_py.keys(), M_ml.keys())
    for k in M_py.keys():
        if isinstance(M_py[k], np.ndarray):
            np.testing.assert_allclose(M_py[k], M_ml[k])
        else:
            np.testing.assert_equal(M_py[k], M_ml[k])
        #endif
    #endfor
#endfunction

@pytest.mark.matlab
def test_matlabResult_Mtype_AR():
    Z = unit.struct()
    Z.y = np.array([0.3689, 1.7332, 4.4612, 8.6571, 14.1025, 19.9205, 25.1013, 28.6412, 29.6255, 27.9823, 24.3297, 19.6076, 14.9241, 11.4991, 10.1617, 11.0637, 13.7449, 17.2860, 20.3594, 22.1273, 22.6871, 22.2647, 21.7503, 21.7766, 22.4222, 23.0887, 22.8530, 20.8312, 16.9178, 12.2047, 8.1746, 6.1802, 7.1880, 10.3238, 13.9558, 16.6593, 17.7819, 16.8473, 13.6191, 8.7625, 3.3752, -1.2232, -4.3543, -6.3534, -7.5214, -7.7184, -6.3560, -3.7456, -1.0647, 0.1189, -1.0943, -4.8182, -9.8748, -15.1380, -20.1121, -24.3101, -26.8854, -27.5187, -26.7431, -25.3383, -24.4567, -24.7742, -26.0167, -27.3826, -28.6450, -29.8255, -30.9399, -31.2633, -29.8637, -26.3731, -20.7224, -13.8470, -7.1985, -1.6368, 2.8426, 6.6485, 10.1993, 13.4056, 16.1677, 18.0377, 18.8201, 18.6230, 18.0602, 17.5344, 17.3998, 17.9912, 19.0084, 19.9550, 20.8642, 21.8105, 22.6187, 23.1577, 23.2020, 22.7213, 21.7322, 20.3055, 18.7144, 17.6494, 17.6896, 19.4331]).reshape(1,100)

    M = unit.struct()
    M.nA     = 5
    M.T      = 1
    M.type   = 'ar'

    M_py = unit._setup.startM(Z,M)
    M_ml = unit.testing._utils.helper_callMatlab_startM(Z,M)

    M_py = M_py.asdict()
    np.testing.assert_equal(M_py.keys(), M_ml.keys())
    np.testing.assert_equal(M_py, M_ml)
#endfunction

@pytest.mark.matlab
def test_matlabResult_Mtype_ARMA():
    Z = unit.struct()
    Z.y = np.array([-0.6414, -1.2702, -1.6709, -2.1127, -2.6331, -2.6047, -2.1535, -1.4578, -0.6231, -0.2227, -0.1690, -0.3604, -0.9009, -1.2931, -0.8250, -0.4794, 0.1758, 0.3859, 0.9157, 0.8542, 0.7340, 0.2724, -0.0139, -0.2549, -0.3777, 0.5664, 1.1882, 1.7230, 2.8352, 3.0762, 3.1665, 2.5065, 2.0137, 1.5180, 1.3144, 1.1304, 1.1657, 1.7187, 1.4472, 0.6970, 0.1014, -0.6432, -1.2211, -1.9671, -2.5832, -2.9261, -3.1203, -3.2308, -3.1741, -3.2030, -2.6119, -2.3326, -1.4115, -0.8117, -0.8238, -1.1635, -1.2944, -1.1234, -0.8689, -0.4708, 0.0936, 0.0606, -0.2149, -1.1426, -2.0622, -2.4288, -2.2597, -1.0636, 0.2026, 0.6426, 1.3806, 2.0113, 2.0155, 1.7967, 1.5848, 1.3625, 1.3454, 1.2884, 1.2502, 1.2373, 0.9493, 1.1422, 1.2444, 1.5411, 1.4447, 0.9505, 0.4163, -0.1565, -0.1855, 0.0992, 0.6571, 0.7233, 0.4505, 0.1675, -0.2749, -0.2215, 0.2952, 0.6218, 1.2096, 2.0231]).reshape(1,100)

    M = unit.struct()
    M.A      = 5
    M.C      = 5
    M.T      = 1
    M.type   = 'arma'

    M_py = unit._setup.startM(Z,M)
    M_ml = unit.testing._utils.helper_callMatlab_startM(Z,M)

    M_py = M_py.asdict()
    np.testing.assert_equal(M_py.keys(), M_ml.keys())
    np.testing.assert_equal(M_py, M_ml)
#endfunction

@pytest.mark.matlab
def test_matlabResult_Mtype_FIR():
    Z = unit.struct()
    Z.u = np.array([    0.5232,    1.0573,    0.5370,   -1.2017,   -1.2442,    0.8720,   -0.6385,    1.1542,   -1.1342,    0.5367,   -0.9635,   -0.5345,   -0.6775,    1.2523,    0.8007,    0.1940,    1.2876,   -0.9579,   -1.7154,    0.4361,    0.0607,    0.0681,   -0.9256,    0.7080,    0.4988,   -1.3223,   -0.0442,    1.2088,   -0.0925,    2.0257,    0.0719,   -0.2465,   -1.2817,    0.0208,    0.5974,    1.8868,   -0.8104,   -0.2102,    0.0775,    0.3354,    0.4301,    1.4799,    0.7109,   -0.5598,    2.4032,   -0.5507,    0.4246,    1.4923,    1.5600,   -1.0089,   -0.1718,   -0.7740,   -0.1394,   -0.1550,   -1.2728,    0.3790,    0.4202,   -0.1946,   -0.4459,   -0.3382,   -2.2165,   -1.1735,   -0.9108,    0.1516,    0.2231,   -0.4196,    0.5840,    0.2523,    0.8537,   -0.0396,    0.0945,    0.6210,    0.0306,    1.0699,   -0.6220,    0.4593,   -0.1500,    0.4346,   -0.8360,    0.7983,   -2.4072,   -0.6924,    2.1643,    1.6554,    0.0690,   -1.0090,   -0.5831,   -0.6838,    0.5609,    1.6452,   -0.1355,   -0.0529,   -0.1590,    1.2492,   -0.2796,    0.3156,   -1.0032,    0.7361,   -1.2447,    0.4571,   -0.9373,    3.1217,    0.2497,   -0.8119,   -0.2005,    1.2755,    0.0157,   -1.5620,    0.8051,   -0.1986,   -0.9414,    1.4032,    0.1968,   -1.0662,    1.6529,    1.1106,   -1.3146,    0.2281,    0.7811,   -0.7594,    0.4062,   -0.1209,   -0.2133,   -1.0370,    1.3459,    0.4809,   -0.0405,    0.2003,    1.4204,   -0.2295,   -0.6903,    0.4025,    0.9057,   -0.3841,   -1.2835,   -1.7139,   -1.1322,    1.5351,    0.9897,   -1.1704,   -0.1884,    0.3106,   -0.6615,    0.3304,   -0.7170,   -1.1122,   -0.9600,    0.6121,   -0.4319,   -0.3839,   -0.0372,   -0.9757,   -0.5389,    0.6558,    0.9936,   -0.0303,    0.2298,   -0.7746,   -0.4812,   -0.4065,    0.5237,   -0.2477,    1.1456,   -1.0216,    0.3023,   -0.6461,    0.0264,    0.1210,   -2.1459,   -0.2080,   -0.6930,    1.9678,    1.0464,   -0.1653,   -0.5798,   -0.2172,    0.2401,    1.0212,   -0.0902,    0.8393,   -0.2974,    1.1550,   -0.4453,   -1.1094,    1.1408,    0.9331,   -0.5206,   -0.5897,    1.3814,   -0.3043,    0.1954,    1.1588,    0.0330,   -0.9552,   -0.2731,    1.1578,   -0.7038,    1.1412,   -0.1581,   -0.9685,   -0.8927,    0.9095,    0.3323,    0.2708,   -1.4823,    1.1944,   -0.1312,    0.4161]).reshape(1, 208)
    Z.y = np.array([    0.0134,   -0.0109,    0.0100,    0.0051,    0.0161,    0.0582,    0.0454,    0.0448,    0.0241,    0.0339,    0.0168,    0.0234,   -0.0006,   -0.0043,    0.0002,   -0.0304,   -0.0448,   -0.0346,   -0.0308,   -0.0009,    0.0108,    0.0085,   -0.0141,   -0.0099,   -0.0195,   -0.0282,   -0.0386,   -0.0451,   -0.0448,   -0.0497,   -0.0433,   -0.0146,    0.0127,    0.0278,    0.0440,    0.0588,    0.0470,    0.0707,    0.0858,    0.0882,    0.0950,    0.1031,    0.1044,    0.1434,    0.1506,    0.1653,    0.1987,    0.2445,    0.2384,    0.2919,    0.3296,    0.3554,    0.3491,    0.3814,    0.3497,    0.3353,    0.2954,    0.2674,    0.2230,    0.2038,    0.1700,    0.1428,    0.1049,    0.0476,   -0.0028,   -0.0662,   -0.1401,   -0.1538,   -0.1613,   -0.1726,   -0.1608,   -0.1772,   -0.1401,   -0.1305,   -0.1005,   -0.0759,   -0.0481,   -0.0257,   -0.0111,   -0.0124,    0.0111,    0.0151,    0.0179,   -0.0191,    0.0009,    0.0144,    0.0044,    0.0292,    0.0285,    0.0245,    0.0336,    0.0285,    0.0347,    0.0392,    0.0608,    0.0759,    0.0874,    0.1011,    0.1097,    0.1137,    0.0915,    0.0882,    0.0808,    0.0799,    0.0952,    0.0927,    0.1178,    0.1182,    0.1311,    0.1532,    0.1302,    0.1274,    0.0884,    0.1147,    0.1175,    0.0842,    0.0954,    0.1000,    0.0944,    0.1059,    0.1244,    0.1270,    0.1337,    0.1212,    0.1146,    0.1214,    0.0904,    0.0870,    0.1006,    0.1052,    0.1105,    0.1232,    0.1238,    0.1487,    0.1462,    0.1555,    0.1510,    0.1216,    0.0571,    0.0573,    0.0201,    0.0080,   -0.0082,   -0.0408,   -0.0215,   -0.0445,   -0.0536,   -0.0814,   -0.0994,   -0.1275,   -0.1498,   -0.1543,   -0.1810,   -0.2080,   -0.2081,   -0.2308,   -0.2271,   -0.2160,   -0.1846,   -0.1817,   -0.1863,   -0.1742,   -0.1602,   -0.1611,   -0.1523,   -0.1580,   -0.1389,   -0.1210,   -0.1347,   -0.1201,   -0.1303,   -0.1494,   -0.1709,   -0.1595,   -0.1766,   -0.1371,   -0.1324,   -0.1195,   -0.0970,   -0.0805,   -0.0336,   -0.0554,   -0.0098,    0.0191,    0.0365,    0.0444,    0.0607,    0.0416,    0.0892,    0.0922,    0.1066,    0.1021,    0.1145,    0.1257,    0.1240,    0.1599,    0.1223,    0.1428,    0.1331,    0.1491,    0.1430,    0.1138,    0.1347,    0.0997,    0.0830,    0.0818,    0.0838,    0.0653]).reshape(1, 208)

    M = unit.struct()
    M.nB     = 103
    M.T      = 0.1
    M.type   = 'fir'

    M_py = unit._setup.startM(Z,M)
    M_ml = unit.testing._utils.helper_callMatlab_startM(Z,M)

    M_py = M_py.asdict()
    np.testing.assert_equal(M_py.keys(), M_ml.keys())
    np.testing.assert_equal(M_py, M_ml)
#endfunction

@pytest.mark.matlab
def test_matlabResult_Mtype_ARX():
    Z = unit.struct()
    Z.u = np.array([-0.8582,-0.4318,-0.3786,-1.2608,-0.6654,-1.9875,0.7823,0.1378,-0.8981,-0.5675,-1.3254,-0.4920,1.0298,-0.9547,-0.1085,0.8223,1.0315,-0.2741,0.0731,0.6247,-0.2907,-1.6443,0.0988,0.4121,0.4227,0.2570,0.9814,0.1772,-0.2267,0.5877,0.8945,-0.0530,0.3222,1.9555,-0.5090,0.4200,-0.5222,0.0386,0.8681,-0.4893,1.1078,-0.0594,1.6367,-1.0950,0.4041,1.5075,-0.3534,-0.2659,-0.9760,-2.4241,-0.1346,1.7164,0.6719,-1.1405,0.4747,0.2458,-0.2260,-0.0638,0.2202,0.4689,0.4559,0.2701,0.0166,-1.0185,0.3926,-0.5999,0.4501,0.9019,-0.7442,-1.7675,-0.3160,-0.2492,1.3844,-0.6512,0.1748,0.3658,0.6112,2.0259,1.4358,-0.4007,-1.7627,-1.9284,-0.1169,-0.2876,-1.1968,-0.3773,1.5679,-0.9293,0.6074,-0.4374,1.3898,0.3072,-0.8160,-1.0211,0.2153,0.2893,-1.0938,-1.2875,-0.3706,-0.0234]).reshape(1,100)
    Z.y = np.array([0.0420,-0.3399,-1.6195,-3.5100,-6.1466,-9.2092,-12.1968,-15.0579,-17.2678,-19.2372,-21.2362,-23.0562,-25.2466,-27.2264,-28.5213,-28.9947,-28.8630,-28.7008,-28.6100,-28.6737,-28.5467,-28.3285,-28.0743,-28.3542,-28.1144,-27.4888,-26.1231,-24.3794,-21.8564,-19.4924,-17.4453,-15.6855,-13.0946,-10.7697,-8.3630,-5.7075,-3.4721,-1.0025,1.6118,3.9653,6.0247,7.4446,8.2908,9.1796,10.4941,11.3872,12.6293,14.1697,15.2498,15.7318,15.3213,13.4237,11.5929,10.7425,10.4218,9.9273,9.3426,8.9936,8.2926,7.5854,7.2418,7.4889,8.0916,8.8710,9.4917,9.5570,9.0631,8.5337,7.6622,7.0290,6.2926,5.3206,4.1902,3.2714,3.2640,3.2831,3.0941,3.1601,3.8458,5.0964,7.0550,7.8479,7.2883,5.0159,2.0501,-0.7350,-3.3518,-5.4294,-5.8487,-5.5105,-4.6254,-3.6242,-2.0109,-0.3967,0.3920,0.6721,0.5282,0.2904,-0.5318,-2.2057]).reshape(1,100)
    
    M = unit.struct()
    M.A      = 3.0
    M.B      = 2.0
    M.T      = 1.0
    M.type   = 'arx'
    M.delay  = 1

    M_py = unit._setup.startM(Z,M)
    M_ml = unit.testing._utils.helper_callMatlab_startM(Z,M)

    M_py = M_py.asdict()
    np.testing.assert_equal(M_py.keys(), M_ml.keys())
    np.testing.assert_equal(M_py, M_ml)
#endfunction

@pytest.mark.matlab
def test_matlabResult_Mtype_ARMAX():
    Z = unit.struct()
    Z.u = np.array([-1.2621,-0.5446,-0.4897,-1.1967,0.6003,0.3437,-3.2646,0.0926,0.9024,-0.7509,-1.0313,-0.5697,0.2005,1.3176,-0.7092,-0.2089,-3.2076,0.0882,-0.9846,0.5830,0.0686,-0.6428,-0.5885,-0.4427,-1.3351,0.0768,0.1846,-0.8624,-0.6552,1.3031,1.0782,0.1004,1.3939,-0.6587,0.4746,-0.4462,0.6007,-0.1612,0.6398,0.4711,-0.2904,-0.8778,-1.1834,-1.6307,-0.6317,0.6878,0.5056,0.4557,-1.1378,-0.4599,-1.4422,1.9168,-0.7759,0.7781,0.1061,-0.2541,2.0402,-1.0367,-0.0213,-0.2206,-1.3048,-0.1364,-0.2759,-0.7507,-0.5720,1.0467,-1.0656,-0.1642,-0.6679,0.7447,0.0501,-1.4642,-1.0787,0.8438,0.6541,0.5651,-1.6396,0.1342,0.0909,0.6814,-1.0428,-0.9796,0.0055,-0.5004,1.9657,2.0306,1.8064,-1.4831,0.2064,0.0257,2.1535,0.5427,0.7285,-0.6107,0.9854,-2.0780,-0.7062,2.6581,1.4134,-0.3463]).reshape(1, 100)
    Z.y = np.array([0.0056,0.0281,0.0752,0.1420,0.2230,0.2963,0.3382,0.3348,0.3078,0.2647,0.1913,0.0813,-0.0603,-0.2458,-0.4811,-0.7556,-1.0419,-1.2988,-1.4979,-1.6347,-1.7098,-1.7317,-1.7187,-1.6923,-1.6659,-1.6351,-1.5959,-1.5532,-1.5229,-1.5120,-1.5246,-1.5593,-1.6260,-1.6975,-1.7458,-1.7511,-1.7111,-1.6373,-1.5548,-1.4782,-1.4289,-1.4031,-1.4064,-1.4243,-1.4473,-1.4555,-1.4404,-1.4174,-1.3828,-1.3319,-1.2666,-1.1929,-1.1149,-1.0364,-0.9511,-0.8740,-0.8179,-0.7794,-0.7561,-0.7467,-0.7489,-0.7556,-0.7535,-0.7300,-0.6870,-0.6189,-0.5298,-0.4229,-0.3038,-0.1757,-0.0436,0.0797,0.2013,0.2991,0.3614,0.3839,0.3688,0.3214,0.2698,0.2059,0.1284,0.0514,-0.0064,-0.0435,-0.0683,-0.0846,-0.0954,-0.0887,-0.0659,-0.0172,0.0483,0.1179,0.1738,0.2127,0.2277,0.2066,0.1462,0.0412,-0.0856,-0.2140]).reshape(1, 100)

    M = unit.struct()
    M.A      = 5.0
    M.B      = 4.0
    M.C      = 1.0
    M.type   = 'armax'
    M.delay  = 1

    M_py = unit._setup.startM(Z,M)
    M_ml = unit.testing._utils.helper_callMatlab_startM(Z,M)

    M_py = M_py.asdict()
    np.testing.assert_equal(M_py.keys(), M_ml.keys())
    np.testing.assert_equal(M_py, M_ml)
#endfunction

@pytest.mark.matlab
def test_matlabResult_Mtype_OE():
    Z = unit.struct()
    Z.u = np.array([0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]).reshape(1, 100)
    Z.y = np.array([0.0411,-0.5753,0.1506,-0.0459,-0.2698,0.2135,-0.3595,-0.0755,1.0434,1.3085,0.9893,0.6931,1.7581,2.3304,2.9236,3.5301,4.1242,3.7254,3.8292,4.8159,5.9153,5.6720,5.6420,5.9813,6.9012,6.6160,6.8738,7.0892,8.0528,7.6082,7.3542,7.9552,8.4184,8.9038,8.4972,8.9503,8.8492,9.3398,8.7312,8.6159,8.6546,8.6137,7.9651,7.5100,6.8392,5.8320,5.6063,4.2822,3.1690,2.7426,1.8273,1.1221,0.9784,-0.3496,-1.3691,-1.6868,-2.3923,-2.8312,-3.2069,-4.3829,-4.4420,-5.5451,-5.1360,-6.2904,-6.2285,-7.0696,-6.8817,-7.3949,-7.1381,-7.6193,-7.8517,-7.8188,-7.9032,-8.5500,-7.7076,-7.5210,-6.4920,-6.6652,-5.3617,-4.7092,-3.7879,-3.1520,-2.6538,-1.5930,-1.2168,-0.1912,0.6072,0.7974,1.4973,2.7005,3.3410,3.4365,3.9933,4.9530,4.5551,6.1212,5.8117,6.3080,6.6310,6.5790]).reshape(1, 100)

    M = unit.struct()
    M.A      = 6.0
    M.B      = 5.0
    M.T      = 1.0
    M.type   = 'oe'
    M.delay  = 1

    M_py = unit._setup.startM(Z,M)
    M_ml = unit.testing._utils.helper_callMatlab_startM(Z,M)

    M_py = M_py.asdict()
    np.testing.assert_equal(M_py.keys(), M_ml.keys())
    np.testing.assert_equal(M_py, M_ml)
#endfunction

@pytest.mark.matlab
def test_matlabResult_Mtype_BJ():
    Z = unit.struct()
    Z.u = np.array([0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]).reshape(1, 100)
    Z.y = np.array([-0.0867,-0.0920,-0.0161,0.1232,0.1616,0.1125,-0.0115,0.0914,0.0438,0.2573,0.1330,0.2612,0.4107,0.3301,0.5555,0.6600,0.6832,0.8087,1.0355,1.2047,1.2871,1.3101,1.4047,1.3957,1.3518,1.2535,1.3232,0.9800,0.8507,1.0284,0.8057,0.5116,0.5079,0.1405,-0.0486,-0.3869,-0.6654,-0.9051,-1.1636,-1.2470,-1.3204,-1.7451,-1.7513,-1.7583,-1.6618,-1.9287,-1.7513,-1.7783,-1.5293,-1.1868,-0.9569,-0.5755,-0.2961,0.0274,0.5452,1.0690,1.2123,1.5320,1.6572,2.0422,2.1588,2.3295,2.3395,2.5307,2.4430,2.1989,1.9563,1.7197,1.2086,0.9377,0.4345,0.1829,-0.1455,-0.7278,-0.9892,-1.5619,-1.8822,-2.1840,-2.4380,-2.4864,-2.4412,-2.4061,-2.3352,-2.1970,-2.0987,-1.8344,-1.4076,-1.2527,-0.7202,-0.1742,0.1693,0.4628,0.8769,1.3772,1.6266,1.8216,2.1241,2.2001,2.3781,2.2027]).reshape(1, 100)

    M = unit.struct()
    M.A      = 5.0
    M.B      = 4.0
    M.C      = 1.0
    M.D      = 1.0
    M.T      = 1.0
    M.delay  = 1
    M.type   = 'bj'

    M_py = unit._setup.startM(Z,M)
    M_ml = unit.testing._utils.helper_callMatlab_startM(Z,M)

    M_py = M_py.asdict()
    np.testing.assert_equal(M_py.keys(), M_ml.keys())
    np.testing.assert_equal(M_py, M_ml)
#endfunction

@pytest.mark.matlab
def test_matlabResult_Mtype_SS():
    Z = unit.struct()
    Z.u = np.array([0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1]).reshape([1, 50])
    Z.y = np.array([0.1505,  0.4466,  0.0082, -0.0021,  0.5915, -0.0233,  0.2751,  0.7622,  0.7694,  1.4671,  1.6932,  1.8357,  1.8977,  2.7174,  2.4473,  3.2220,  3.5492,  3.3869,  3.5003,  3.6540,  2.9860,  2.3764,  2.0255,  1.4569,  0.4260,  0.2941,  0.4930, -0.1151, -0.0061, -0.4835, -0.0158,  0.3729,  0.0449,  0.9156,  1.0666,  1.0895,  1.5500,  1.0335,  0.9223,  1.0800,  0.9004,  0.5220, -0.0388,  0.1815, -0.8116, -0.6079, -0.6360, -1.0180, -1.0058, -1.0628]).reshape([1, 50])

    M = unit.struct()
    M.nx     = 4
    M.T      = 1
    M.type   = 'ss'

    Z = unit._setup.startZ(Z)

    M_py = unit._setup.startM(Z,M)
    M_ml = unit.testing._utils.helper_callMatlab_startM(Z,M)

    M_py = M_py.asdict()
    np.testing.assert_equal(M_py.keys(), M_ml.keys())
    np.testing.assert_equal(M_py, M_ml)
#endfunction


